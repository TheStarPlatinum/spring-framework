@startuml


interface InstantiationAwareBeanPostProcessor{
    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName)
}

interface Ordered{
    在注册时会根据ordered接口分到
}

class ProxyProcessorSupport{
}

interface BeanFactoryAware{

}

interface SmartInstantiationAwareBeanPostProcessor{
}

abstract class AbstractAutoProxyCreator{
'   会调用 initBeanFactory 后者在 anno中重写
    public void setBeanFactory(BeanFactory beanFactory)
'    获取所有合适的增强器
    findEligibleAdvisors(Class<?> beanClass, String beanName)
    protected void initBeanFactory(ConfigurableListableBeanFactory beanFactory)
    public Object postProcessBeforeInstantiation(Class<?> beanClass, String beanName)
}


abstract class AbstractAdvisorAutoProxyCreator{
    public void setBeanFactory(BeanFactory beanFactory)
}

class AspectJAwareAdvisorAutoProxyCreator{
}

class AnnotationAwareAspectJAutoProxyCreator{
    protected void initBeanFactory(ConfigurableListableBeanFactory beanFactory)
}

Ordered <|.. ProxyProcessorSupport
InstantiationAwareBeanPostProcessor <|-- SmartInstantiationAwareBeanPostProcessor
BeanFactoryAware <|.. AbstractAutoProxyCreator
SmartInstantiationAwareBeanPostProcessor <|.. AbstractAutoProxyCreator
ProxyProcessorSupport <|-- AbstractAutoProxyCreator
AbstractAutoProxyCreator<|-- AbstractAdvisorAutoProxyCreator
AbstractAdvisorAutoProxyCreator <|-- AspectJAwareAdvisorAutoProxyCreator
AspectJAwareAdvisorAutoProxyCreator <|-- AnnotationAwareAspectJAutoProxyCreator
@enduml